package View;

import Controller.Gestor;
import exs.logs.err.Log;
import exs.mod.Carrera;
import exs.mod.Estudiante;
import exs.mod.Tutor;
import exs.mod.Tutoria;
import exs.mod.var.Grupo_Var;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java_to_excel.Excel;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kevin Villalobos A.
 */
public class Admin_Main extends javax.swing.JFrame implements Observer {

    //Gestor
    public static Gestor controller = Gestor.getInstancia();
    private static int MIN_H = 600;
    private static int MIN_W = 975;
    

    public Admin_Main() {       
        this.excel = new Excel();  
        if (controller.isUsable()) {
            initComponents();
             fill_combos();
            setImages();    
//            sorters();
            controller.addObserver(this);
            cbAnioEstudiante.setEnabled(false);
            carreracbEstudiante.setEnabled(false);
        } else {
            setVisible(false);
            JOptionPane.showMessageDialog(null, "No se puede continuar con la ejecucion del programa...", "DB Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }        
    }

    private void setImages() {
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File("img/elogo.png"));
            this.setIconImage(img);
            b_grupo_editar.setIcon(new ImageIcon("img/g_add.png"));
        } catch (Exception e) {
            Log.SendLog(e.getMessage());
        }
        setImaAdd();
        setImaEdit();
        setImaDel();
       setMaximumSize(new Dimension(MIN_W, MIN_H));
    }

    private void setImaAdd() {
        try {
            String path = "img/b_add.png";
            ImageIcon ima = new ImageIcon(path);
            b_tutor_add.setIcon(ima);
            b_tutoria_add.setIcon(ima);
            b_est_add.setIcon(ima);
            b_carrera_add.setIcon(ima);

        } catch (Exception e) {
            Log.SendLog(e.getMessage());
        }
    }

    private void setImaEdit() {
        try {
            String path = "img/b_up.png";
            ImageIcon ima = new ImageIcon(path);
            b_tutor_edit.setIcon(ima);
            b_tutoria_edit.setIcon(ima);
            b_est_edit.setIcon(ima);
            b_carrera_edit.setIcon(ima);

        } catch (Exception e) {
            Log.SendLog(e.getMessage());
        }
    }

    private void setImaDel() {
        try {
            String path = "img/b_del.png";
            ImageIcon ima = new ImageIcon(path);
            b_tutor_del.setIcon(ima);
            b_tutoria_del.setIcon(ima);
            b_est_del.setIcon(ima);
            b_carrera_del.setIcon(ima);

        } catch (Exception e) {
            Log.SendLog(e.getMessage());
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        tab_pane = new javax.swing.JTabbedPane();
        p_tutorias = new javax.swing.JPanel();
        scrpane1 = new javax.swing.JScrollPane();
        table_tutorias = new javax.swing.JTable();
        b_tutoria_add = new javax.swing.JButton();
        b_tutoria_edit = new javax.swing.JButton();
        b_tutoria_del = new javax.swing.JButton();
        buttonExcelTutoria = new javax.swing.JButton();
        checkTutorias = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbCicloTutoria = new javax.swing.JComboBox();
        cbAnioTutoria = new javax.swing.JComboBox();
        p_grupos = new javax.swing.JPanel();
        scrpane2 = new javax.swing.JScrollPane();
        table_grupos = new javax.swing.JTable();
        b_grupo_editar = new javax.swing.JButton();
        buttonExcelGrupos = new javax.swing.JButton();
        p_tutores = new javax.swing.JPanel();
        scrpane3 = new javax.swing.JScrollPane();
        table_tutores = new javax.swing.JTable();
        b_tutor_add = new javax.swing.JButton();
        b_tutor_edit = new javax.swing.JButton();
        b_tutor_del = new javax.swing.JButton();
        ButtonExcelTutores = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cbCicloTutores = new javax.swing.JComboBox();
        cbAnioTutores = new javax.swing.JComboBox();
        checkTutores = new javax.swing.JCheckBox();
        p_estudiantes = new javax.swing.JPanel();
        scrpane4 = new javax.swing.JScrollPane();
        table_estudiantes = new javax.swing.JTable();
        b_est_add = new javax.swing.JButton();
        b_est_edit = new javax.swing.JButton();
        b_est_del = new javax.swing.JButton();
        ButtonExcelEst = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        checkEstudiantes = new javax.swing.JCheckBox();
        cbCicloEstudiante = new javax.swing.JComboBox();
        cbAnioEstudiante = new javax.swing.JComboBox();
        carreracbEstudiante = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        scrpane5 = new javax.swing.JScrollPane();
        table_carreras = new javax.swing.JTable();
        b_carrera_add = new javax.swing.JButton();
        b_carrera_edit = new javax.swing.JButton();
        b_carrera_del = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setMinimumSize(getPreferredSize());
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                Fix_Size(evt);
            }
        });

        tab_pane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tab_paneStateChanged(evt);
            }
        });

        table_tutorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_tutorias.getTableHeader().setReorderingAllowed(false);
        scrpane1.setViewportView(table_tutorias);

        b_tutoria_add.setText("Agregar");
        b_tutoria_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_tutoria_addActionPerformed(evt);
            }
        });

        b_tutoria_edit.setText("  Editar");
        b_tutoria_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_tutoria_editActionPerformed(evt);
            }
        });

        b_tutoria_del.setText("Borrar");
        b_tutoria_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_tutoria_delActionPerformed(evt);
            }
        });

        buttonExcelTutoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/page_white_excel.png"))); // NOI18N
        buttonExcelTutoria.setToolTipText("Haga Click Aqui para Expotar a Excel");
        buttonExcelTutoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExcelTutoriaActionPerformed(evt);
            }
        });

        checkTutorias.setText("Mostrar solo de:");
        checkTutorias.setToolTipText("Muestar solo las tutorias donde existan grupos en el ciclo,año seleccionado");
        checkTutorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTutoriasActionPerformed(evt);
            }
        });

        jLabel3.setText("Ciclo:");

        jLabel5.setText("Año:");

        cbCicloModel = new javax.swing.DefaultComboBoxModel();
        cbCicloTutoria.setModel(cbCicloModel);
        cbCicloTutoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCicloTutoriaActionPerformed(evt);
            }
        });

        cbAnioModel = new javax.swing.DefaultComboBoxModel();
        cbAnioTutoria.setModel(cbAnioModel);
        cbAnioTutoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAnioTutoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_tutoriasLayout = new javax.swing.GroupLayout(p_tutorias);
        p_tutorias.setLayout(p_tutoriasLayout);
        p_tutoriasLayout.setHorizontalGroup(
            p_tutoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_tutoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrpane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_tutoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_tutoriasLayout.createSequentialGroup()
                        .addGroup(p_tutoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(b_tutoria_add, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_tutoria_edit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkTutorias)
                            .addGroup(p_tutoriasLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(p_tutoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(p_tutoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbCicloTutoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbAnioTutoria, 0, 77, Short.MAX_VALUE)))
                            .addComponent(b_tutoria_del, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(buttonExcelTutoria, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        p_tutoriasLayout.setVerticalGroup(
            p_tutoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_tutoriasLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(b_tutoria_add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_tutoria_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_tutoria_del, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkTutorias)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(p_tutoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbCicloTutoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_tutoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbAnioTutoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addComponent(buttonExcelTutoria, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(p_tutoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrpane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        tab_pane.addTab("Tutorías", p_tutorias);

        table_grupos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre", "Cantidad de Grupos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_grupos.getTableHeader().setReorderingAllowed(false);
        scrpane2.setViewportView(table_grupos);

        b_grupo_editar.setText("Editar");
        b_grupo_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_grupo_editarActionPerformed(evt);
            }
        });

        buttonExcelGrupos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/page_white_excel.png"))); // NOI18N
        buttonExcelGrupos.setToolTipText("Haga Click Aqui para Expotar a Excel");
        buttonExcelGrupos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExcelGruposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_gruposLayout = new javax.swing.GroupLayout(p_grupos);
        p_grupos.setLayout(p_gruposLayout);
        p_gruposLayout.setHorizontalGroup(
            p_gruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_gruposLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrpane2, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_gruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_gruposLayout.createSequentialGroup()
                        .addComponent(b_grupo_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(buttonExcelGrupos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        p_gruposLayout.setVerticalGroup(
            p_gruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_gruposLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrpane2, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(p_gruposLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(b_grupo_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonExcelGrupos, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tab_pane.addTab("Grupos", p_grupos);

        table_tutores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Genero", "Nombre", "Télefono", "E-Mail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_tutores.getTableHeader().setReorderingAllowed(false);
        scrpane3.setViewportView(table_tutores);

        b_tutor_add.setText("Agregar");
        b_tutor_add.setToolTipText("");
        b_tutor_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_tutor_addActionPerformed(evt);
            }
        });

        b_tutor_edit.setText("  Editar");
        b_tutor_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_tutor_editActionPerformed(evt);
            }
        });

        b_tutor_del.setText("Borrar");
        b_tutor_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_tutor_delActionPerformed(evt);
            }
        });

        ButtonExcelTutores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/page_white_excel.png"))); // NOI18N
        ButtonExcelTutores.setToolTipText("Haga Click Aqui para Expotar a Excel");
        ButtonExcelTutores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExcelTutoresActionPerformed(evt);
            }
        });

        jButton3.setText("Ver Historial");
        jButton3.setToolTipText("Ver Cursos en los que la persona ha sido tutora");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel9.setText("Ciclo:");

        jLabel10.setText("Año:");

        cbCicloTutores.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbCicloTutores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCicloTutoresActionPerformed(evt);
            }
        });

        cbAnioTutores.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbAnioTutores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAnioTutoresActionPerformed(evt);
            }
        });

        checkTutores.setText("Ver Solo del:");
        checkTutores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTutoresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_tutoresLayout = new javax.swing.GroupLayout(p_tutores);
        p_tutores.setLayout(p_tutoresLayout);
        p_tutoresLayout.setHorizontalGroup(
            p_tutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_tutoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrpane3, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_tutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonExcelTutores, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(p_tutoresLayout.createSequentialGroup()
                        .addGroup(p_tutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(p_tutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(b_tutor_add, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(b_tutor_edit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(b_tutor_del, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(p_tutoresLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(p_tutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(p_tutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbCicloTutores, 0, 85, Short.MAX_VALUE)
                                    .addComponent(cbAnioTutores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(checkTutores))
                        .addContainerGap())))
        );
        p_tutoresLayout.setVerticalGroup(
            p_tutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_tutoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrpane3, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(p_tutoresLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(b_tutor_add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_tutor_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_tutor_del, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(checkTutores)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(p_tutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cbCicloTutores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_tutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(cbAnioTutores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ButtonExcelTutores, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tab_pane.addTab("Tutoras(es)", p_tutores);

        table_estudiantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Télefono", "Celular", "E-Mail", "Curso", "Horario", "Ciclo", "Carrera", "Sede"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_estudiantes.getTableHeader().setReorderingAllowed(false);
        scrpane4.setViewportView(table_estudiantes);

        b_est_add.setText("Agregar");
        b_est_add.setToolTipText("");
        b_est_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_est_addActionPerformed(evt);
            }
        });

        b_est_edit.setText("  Editar");
        b_est_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_est_editActionPerformed(evt);
            }
        });

        b_est_del.setText("Borrar");
        b_est_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_est_delActionPerformed(evt);
            }
        });

        ButtonExcelEst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/page_white_excel.png"))); // NOI18N
        ButtonExcelEst.setToolTipText("Haga Click Aqui para Expotar a Excel");
        ButtonExcelEst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExcelEstActionPerformed(evt);
            }
        });

        jButton2.setText("Ver Historial");
        jButton2.setToolTipText("Ver cursos en lo que ha matriculado esta persona");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        checkEstudiantes.setText("Ver Solo de:");
        checkEstudiantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEstudiantesActionPerformed(evt);
            }
        });

        cbCicloEstudiante.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbCicloEstudiante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCicloEstudianteActionPerformed(evt);
            }
        });

        cbAnioEstudiante.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbAnioEstudiante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAnioEstudianteActionPerformed(evt);
            }
        });

        carreracbEstudiante.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        carreracbEstudiante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carreracbEstudianteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_estudiantesLayout = new javax.swing.GroupLayout(p_estudiantes);
        p_estudiantes.setLayout(p_estudiantesLayout);
        p_estudiantesLayout.setHorizontalGroup(
            p_estudiantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_estudiantesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrpane4, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_estudiantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonExcelEst, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(p_estudiantesLayout.createSequentialGroup()
                        .addGroup(p_estudiantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(b_est_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_est_edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_est_del, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(checkEstudiantes, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, p_estudiantesLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(p_estudiantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(carreracbEstudiante, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbAnioEstudiante, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbCicloEstudiante, 0, 104, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        p_estudiantesLayout.setVerticalGroup(
            p_estudiantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_estudiantesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrpane4, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(p_estudiantesLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(b_est_add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_est_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_est_del, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkEstudiantes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbCicloEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbAnioEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(carreracbEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ButtonExcelEst, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tab_pane.addTab("Estudiantes", p_estudiantes);

        table_carreras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número", "Nombre", "Sede"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_carreras.getTableHeader().setReorderingAllowed(false);
        scrpane5.setViewportView(table_carreras);

        b_carrera_add.setText("Agregar");
        b_carrera_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_carrera_addActionPerformed(evt);
            }
        });

        b_carrera_edit.setText("  Editar");
        b_carrera_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_carrera_editActionPerformed(evt);
            }
        });

        b_carrera_del.setText("Borrar");
        b_carrera_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_carrera_delActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/page_white_excel.png"))); // NOI18N
        jButton1.setToolTipText("Haga Click Aqui para Expotar a Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(scrpane5, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(b_carrera_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_carrera_edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_carrera_del, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(b_carrera_add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_carrera_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_carrera_del, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 196, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrpane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        tab_pane.addTab("Carreras", jPanel1);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/una_logo.png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/front_admin.jpg"))); // NOI18N

        jMenu1.setText("Informes");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem2.setText("Estudiantes que han retirado un curso...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tab_pane)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel4)
                        .addGap(56, 56, 56))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(tab_pane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_grupo_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_grupo_editarActionPerformed
        int i = table_grupos.getSelectedRow();
        if (i >= 0) {
            String cod=null;
            cod=(String) table_grupos.getModel().getValueAt(table_grupos.getSelectedRow(),0);
            String nombre=(String) table_grupos.getModel().getValueAt(table_grupos.getSelectedRow(),1);
            Tutoria t= new Tutoria(cod,nombre);
            new Admin_Grupos(t).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero una tutoría de la tabla");
        }
    }//GEN-LAST:event_b_grupo_editarActionPerformed

    private void tab_paneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tab_paneStateChanged
        update_tables();
    }//GEN-LAST:event_tab_paneStateChanged

    private void Fix_Size(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_Fix_Size
//        if (getWidth() < MIN_W) {
//            setSize(MIN_H, getHeight());
//        }
//        if (getHeight() < MIN_H) {
//            setSize(getWidth(), MIN_H);
//        }
    }//GEN-LAST:event_Fix_Size

    private void b_tutor_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_tutor_addActionPerformed
        new Admin_New_Tutor(null).setVisible(true);
    }//GEN-LAST:event_b_tutor_addActionPerformed

    private void b_tutor_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_tutor_editActionPerformed
        int ced;
        int i = table_tutores.getSelectedRow();       
        
        if (i >= 0) {
            ced=Integer.parseInt(table_tutores.getModel().getValueAt(table_tutores.getSelectedRow(),0)+"");
            Tutor t= buscarTutora(ced);
            new Admin_New_Tutor(t).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero un tutor de la tabla");
        }
    }//GEN-LAST:event_b_tutor_editActionPerformed

    private void b_tutor_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_tutor_delActionPerformed
        del_tutor();
    }//GEN-LAST:event_b_tutor_delActionPerformed

    private void b_carrera_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_carrera_addActionPerformed
        new Admin_New_Carrera(null).setVisible(true);
    }//GEN-LAST:event_b_carrera_addActionPerformed

    private void b_carrera_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_carrera_editActionPerformed
        int i = table_carreras.getSelectedRow();
        if (i >= 0) {
            Carrera t = controller._getCarreras(false).get(i);
            new Admin_New_Carrera(t).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero una carrera de la tabla");
        }
    }//GEN-LAST:event_b_carrera_editActionPerformed

    private void b_carrera_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_carrera_delActionPerformed
        int i = table_carreras.getSelectedRow();
        if (i >= 0) {
            Carrera t = controller._getCarreras(false).get(i);
            String msj = "Seguro que desea borrar la carrera " + t.toString() + "?";
            int r = JOptionPane.showConfirmDialog(rootPane, msj, "Borrar Carrera", JOptionPane.YES_NO_OPTION);
            if (r == 0) {
                controller.del_carrera(i);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero una carrera de la tabla");
        }
    }//GEN-LAST:event_b_carrera_delActionPerformed

    private void b_tutoria_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_tutoria_delActionPerformed
        del_tutoria();
    }//GEN-LAST:event_b_tutoria_delActionPerformed

    private void b_tutoria_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_tutoria_editActionPerformed
        String cod=null;
        cod=(String) table_tutorias.getModel().getValueAt(table_tutorias.getSelectedRow(),0);
        String nombre=(String) table_tutorias.getModel().getValueAt(table_tutorias.getSelectedRow(),1);
        Tutoria t= new Tutoria(cod,nombre);
        if (cod != null) {
            new Admin_New_Tutoria(t).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero una tutoría de la tabla");
        }
    }//GEN-LAST:event_b_tutoria_editActionPerformed

    private void b_tutoria_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_tutoria_addActionPerformed
        new Admin_New_Tutoria(null).setVisible(true);
    }//GEN-LAST:event_b_tutoria_addActionPerformed

    private void buttonExcelTutoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExcelTutoriaActionPerformed
       this.guardarTutoriasExcel();
    }//GEN-LAST:event_buttonExcelTutoriaActionPerformed

    private void buttonExcelGruposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExcelGruposActionPerformed
        this.guardarGrupoExcel();
    }//GEN-LAST:event_buttonExcelGruposActionPerformed

    private void ButtonExcelTutoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExcelTutoresActionPerformed
        this.guardarTutoresExcel();
    }//GEN-LAST:event_ButtonExcelTutoresActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.guardarCarrerasExcel();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int ced;
        int i = table_tutores.getSelectedRow();
        if (i >= 0) {
            ced=Integer.parseInt(table_tutores.getModel().getValueAt(table_tutores.getSelectedRow(),0)+"");
            Tutor tutor= buscarTutora(ced);
            ArrayList a=getHistorico(tutor.getId(),2);
            if(a!=null){
                new Admin_Historico_Est(a).setVisible(true);
            }else{
                JOptionPane.showMessageDialog(null, "Error,No se pudo leer el historial,puede que esta persona no tenga ninguna matricula");}
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero un tutor de la tabla");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void checkTutoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTutoriasActionPerformed
        update_tableTutoria(false);
    }//GEN-LAST:event_checkTutoriasActionPerformed

    private void cbCicloTutoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCicloTutoriaActionPerformed
        update_tableTutoria(false);
    }//GEN-LAST:event_cbCicloTutoriaActionPerformed

    private void cbAnioTutoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAnioTutoriaActionPerformed
        update_tableTutoria(false);
    }//GEN-LAST:event_cbAnioTutoriaActionPerformed

    private void checkTutoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTutoresActionPerformed
        update_tableTutores(false);
    }//GEN-LAST:event_checkTutoresActionPerformed

    private void cbCicloTutoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCicloTutoresActionPerformed
        update_tableTutores(false);
    }//GEN-LAST:event_cbCicloTutoresActionPerformed

    private void cbAnioTutoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAnioTutoresActionPerformed
        update_tableTutores(false);
    }//GEN-LAST:event_cbAnioTutoresActionPerformed

    private void cbAnioEstudianteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAnioEstudianteActionPerformed
        update_tableEstudiantes(false);        
        carreracbEstudiante.setEnabled(true);
    }//GEN-LAST:event_cbAnioEstudianteActionPerformed

    private void cbCicloEstudianteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCicloEstudianteActionPerformed
        update_tableEstudiantes(false);
        cbAnioEstudiante.setEnabled(true);
    }//GEN-LAST:event_cbCicloEstudianteActionPerformed

    private void checkEstudiantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEstudiantesActionPerformed
        update_tableEstudiantes(false);
    }//GEN-LAST:event_checkEstudiantesActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int i = table_estudiantes.getSelectedRow();
        String ced;
        if (i >= 0) {
            ced=table_estudiantes.getModel().getValueAt(table_estudiantes.getSelectedRow(),0)+"";
            Estudiante estudiante = controller.getEstudiante(ced);
            ArrayList a=getHistorico(estudiante.getId(),1);
            if(a!=null){
                new Admin_Historico_Est(a).setVisible(true);
            }else{
                JOptionPane.showMessageDialog(null, "Error,No se pudo leer el historial,puede que esta persona no tenga ninguna matricula");}
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero un estudiante de la tabla");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void ButtonExcelEstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExcelEstActionPerformed
        this.guardarEstudiantesExcel();
    }//GEN-LAST:event_ButtonExcelEstActionPerformed

    private void b_est_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_est_delActionPerformed
        int i = table_estudiantes.getSelectedRow();
        String ced;
        if (i >= 0) {
            ced=table_estudiantes.getModel().getValueAt(table_estudiantes.getSelectedRow(),0)+"";
            Estudiante estudiante = controller.getEstudiante(ced);
            String msj = "Seguro que desea borrar ";
            msj += (estudiante.getGenero() == 1) ? "el estudiante " : "la estudiante ";
            msj += estudiante.getId() + " - " + estudiante.getNombre() + " " + estudiante.getPriApellido() + " " + estudiante.getSegApellido() + "?";
            int r = JOptionPane.showConfirmDialog(rootPane, msj+",Tome en cuenta que está opcion borrará el estudiante del sistema,\n para eliminar a un estudiante de un grupo vaya a Grupos-Seleccione el grupo, click en matricula y luego borrá a el/la estudiante", "Borrar Estudiante", JOptionPane.YES_NO_OPTION);
            if (r == 0) {
                controller.del_estudiante(i);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero un estudiante de la tabla");
        }
    }//GEN-LAST:event_b_est_delActionPerformed

    private void b_est_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_est_editActionPerformed
        int i = table_estudiantes.getSelectedRow();
        String ced;
        if (i >= 0) {
            ced=table_estudiantes.getModel().getValueAt(table_estudiantes.getSelectedRow(),0)+"";
            Estudiante estudiante = controller.getEstudiante(ced);
            new Admin_New_Est(estudiante).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero un estudiante de la tabla");
        }
    }//GEN-LAST:event_b_est_editActionPerformed

    private void b_est_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_est_addActionPerformed
        new Admin_New_Est(null).setVisible(true);
    }//GEN-LAST:event_b_est_addActionPerformed

    private void carreracbEstudianteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carreracbEstudianteActionPerformed
       update_tableEstudiantes(false); 
    }//GEN-LAST:event_carreracbEstudianteActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new Retiraron();    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
            
    }//GEN-LAST:event_jMenu1ActionPerformed

    public ArrayList getHistorico(int id,int tipo){
        return controller.getHistorico(id,tipo);
    }
    
    public void del_tutoria() {
        String cod=null;
        cod=(String) table_tutorias.getModel().getValueAt(table_tutorias.getSelectedRow(),0);
        String nombre=(String) table_tutorias.getModel().getValueAt(table_tutorias.getSelectedRow(),1);
        Tutoria t= new Tutoria(cod,nombre);
        if (cod !=null) {
            String msj = "Seguro que desea borrar la tutoría " + t.getCod() + " " + t.getNom() + "?";
            int r = JOptionPane.showConfirmDialog(rootPane, msj, "Borrar Tutoría", JOptionPane.YES_NO_OPTION);
            if (r == 0) {
                controller.del_tutoria(t);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero una tutoría de la tabla");
        }
    }

    public void del_tutor() {
        int ced;
        int i = table_tutores.getSelectedRow();
        if (i >= 0) {
            ced=Integer.parseInt(table_tutores.getModel().getValueAt(table_tutores.getSelectedRow(),0)+"");
            Tutor t= buscarTutora(ced);
            String msj = "Seguro que desea borrar ";
            msj += (t.getGenero() == 1) ? "el tutor " : "la tutora ";
            msj += t.getId() + " - " + t.getNombre() + " " + t.getPriApellido() + " " + t.getSegApellido() + "?";
            int r = JOptionPane.showConfirmDialog(rootPane, msj, "Borrar Tutor", JOptionPane.YES_NO_OPTION);
            if (r == 0) {
                controller.del_tutor(i);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar primero un tutor de la tabla");
        }
    }

    private void update_tables() {
        int i = tab_pane.getSelectedIndex();
        switch (i) {
            case 0:
                fillTable_Tutorias();
                break;
            case 1:
                fillTable_Grupos();
                break;
            case 2:
                fillTable_Tutores();
                break;
            case 3:
                fillTable_Estudiantes();
                break;

            case 4:
                fillTable_Carreras();
                break;
        }
    }

    private void fillTable_Carreras() {
        this.setTitle("Carreras  -  ExS");
        limpiaTabla(table_carreras);
        ArrayList<Carrera> list = controller.getCarreras(false);
        DefaultTableModel modelo = (DefaultTableModel) table_carreras.getModel();
        for (int i = 0; i < list.size(); i++) {
            modelo.addRow(list.get(i).toArray());
        }
    }

    private void fillTable_Estudiantes() {
        this.setTitle("Estudiantes  -  ExS");
        limpiaTabla(table_estudiantes);
        ArrayList<Estudiante> list = controller.getEstudiantes();
        DefaultTableModel modelo = (DefaultTableModel) table_estudiantes.getModel();
        for (int i = 0; i < list.size(); i++) {
            Object[] array = list.get(i).toArray2();
            array[8] = controller.getCarrera(Integer.parseInt((String) array[8]));
            modelo.addRow(array);
        }
    }

    private void fillTable_Tutores() {
        this.setTitle("Tutores  -  ExS");
        limpiaTabla(table_tutores);
        ArrayList<Tutor> list = controller.getTutores();
        DefaultTableModel modelo = (DefaultTableModel) table_tutores.getModel();
        for (int i = 0; i < list.size(); i++) {
            modelo.addRow(list.get(i).toArray());
        }
    }

    private void fillTable_Tutorias() {
        this.setTitle("Tutorías  -  ExS");
        limpiaTabla(table_tutorias);
        ArrayList<Tutoria> list = controller.getTutorias();
        DefaultTableModel modelo = (DefaultTableModel) table_tutorias.getModel();
        for (int i = 0; i < list.size(); i++) {
            modelo.addRow(list.get(i).toArray());
        }
    }

    private void limpiaTabla(JTable tabla) {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        while (modelo.getRowCount() != 0) {
            modelo.removeRow(0);
        }
    }

    private void fillTable_Grupos() {
        this.setTitle("Grupos  -  ExS");
        limpiaTabla(table_grupos);
        ArrayList<Tutoria> list = controller.getTutorias();
        DefaultTableModel modelo = (DefaultTableModel) table_grupos.getModel();
        for (int i = 0; i < list.size(); i++) {
            Object[] array = new Object[3];
            array[0] = list.get(i).getCod();
            array[1] = list.get(i).getNom();
            array[2] = controller.getCantidadGrupos(list.get(i).getCod());
            modelo.addRow(array);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonExcelEst;
    private javax.swing.JButton ButtonExcelTutores;
    private javax.swing.JButton b_carrera_add;
    private javax.swing.JButton b_carrera_del;
    private javax.swing.JButton b_carrera_edit;
    private javax.swing.JButton b_est_add;
    private javax.swing.JButton b_est_del;
    private javax.swing.JButton b_est_edit;
    private javax.swing.JButton b_grupo_editar;
    private javax.swing.JButton b_tutor_add;
    private javax.swing.JButton b_tutor_del;
    private javax.swing.JButton b_tutor_edit;
    private javax.swing.JButton b_tutoria_add;
    private javax.swing.JButton b_tutoria_del;
    private javax.swing.JButton b_tutoria_edit;
    private javax.swing.JButton buttonExcelGrupos;
    private javax.swing.JButton buttonExcelTutoria;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox carreracbEstudiante;
    private javax.swing.JComboBox cbAnioEstudiante;
    private javax.swing.JComboBox cbAnioTutores;
    private javax.swing.JComboBox cbAnioTutoria;
    private javax.swing.DefaultComboBoxModel cbAnioModel;
    private javax.swing.JComboBox cbCicloEstudiante;
    private javax.swing.JComboBox cbCicloTutores;
    private javax.swing.JComboBox cbCicloTutoria;
    private javax.swing.DefaultComboBoxModel cbCicloModel;
    private javax.swing.JCheckBox checkEstudiantes;
    private javax.swing.JCheckBox checkTutores;
    private javax.swing.JCheckBox checkTutorias;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel p_estudiantes;
    private javax.swing.JPanel p_grupos;
    private javax.swing.JPanel p_tutores;
    private javax.swing.JPanel p_tutorias;
    private javax.swing.JScrollPane scrpane1;
    private javax.swing.JScrollPane scrpane2;
    private javax.swing.JScrollPane scrpane3;
    private javax.swing.JScrollPane scrpane4;
    private javax.swing.JScrollPane scrpane5;
    private javax.swing.JTabbedPane tab_pane;
    private javax.swing.JTable table_carreras;
    private javax.swing.JTable table_estudiantes;
    private javax.swing.JTable table_grupos;
    private javax.swing.JTable table_tutores;
    private javax.swing.JTable table_tutorias;
    // End of variables declaration//GEN-END:variables
    private Excel excel;
    @Override
    public void update(Observable o, Object arg) {
        update_tables();
    }
    
    private void guardarTutoriasExcel(){
         Jfc j=new Jfc();
         String path=j.guardar();
         if(path!=null)
            excel.guardar(table_tutorias,path);
    }
    
    private void guardarGrupoExcel(){
         Jfc j=new Jfc();
         String path=j.guardar();
         if(path!=null)
            excel.guardar(table_grupos,path);
    }
    
    private void guardarTutoresExcel(){
         Jfc j=new Jfc();
         String path=j.guardar();
         if(path!=null)
            excel.guardar(table_tutores,path);
    }
    
    private void guardarEstudiantesExcel(){
         Jfc j=new Jfc();
         String path=j.guardar();
         if(path!=null) 
            excel.guardar(table_estudiantes,path);
    }
    
    private void guardarCarrerasExcel(){
         Jfc j=new Jfc();
         String path=j.guardar();
         if(path!=null)
            excel.guardar(table_carreras,path);
    }
    
     private void fill_combos() {
        try {
            int anio = Grupo_Var.getAnio();
            int ciclo = Grupo_Var.getCiclo();
            for (int i = -2; i < 3; i++) {
                cbAnioModel.addElement("" + (anio + i));
            }
            for (int i = 0; i < Grupo_Var.CICLOS.length; i++) {
                cbCicloModel.addElement("" + Grupo_Var.CICLOS[i]);
            }
            
            
            cbAnioTutoria.setSelectedIndex(2);
            cbCicloTutoria.setSelectedIndex(ciclo);
            
            
            cbCicloTutores.setModel(cbCicloModel);
            cbAnioTutores.setModel(cbAnioModel);
            cbAnioTutores.setSelectedIndex(2);
            cbCicloTutores.setSelectedIndex(ciclo);
            
            cbCicloEstudiante.setModel(cbCicloModel);
            cbCicloEstudiante.addItem("--");
            cbAnioEstudiante.setModel(cbAnioModel);
            cbAnioEstudiante.addItem("--");
            cbAnioEstudiante.setSelectedIndex(2);
            cbCicloEstudiante.setSelectedIndex(ciclo);
            
            ArrayList<Carrera> carreras_sede = null;
            carreras_sede = controller.getCarreras_Sede(0);
            carreracbEstudiante.removeAllItems();
            carreracbEstudiante.addItem("--");
            for (int i = 0; i < carreras_sede.size(); i++) {
                carreracbEstudiante.addItem(carreras_sede.get(i).getNombre());
            }
        } catch (Exception e) {
            Log.SendLog(e.getMessage());
        }
    }
    
//      private void listenerCombos(java.awt.event.ActionEvent evt) {                                
//        update_table(false);
//    }  
    
//    private void chk_Change_M() {
//        if (checkMostrarTutoria.isSelected()) {
//           // grupoMostrar(true);
//        } else {
//          //  grupoMostrar(false);
//        }
//       //
//        update_table(false);
//    }
     

     
     
     private void update_tableGrupo(boolean query) {  
          ArrayList<Tutoria> grupos = controller.getTutorias();
          DefaultTableModel modelo = (DefaultTableModel) table_grupos.getModel();
        

           while (modelo.getRowCount() != 0) {
               modelo.removeRow(0);
           }

           for (int i = 0; grupos != null && i < grupos.size(); i++) {
               Object[] array = grupos.get(i).toArray();
                array[7] = controller.getCantidadMatriculas((String)array[0]);             
                modelo.addRow(array);               
           }
     }
     
     private void update_tableTutoria(boolean query) {
            ArrayList<Tutoria> tutorias = controller.getTutorias();

            if (query) {
               if (tutorias != null) {
                   tutorias.clear();
               }
           }

           DefaultTableModel modelo = (DefaultTableModel) table_tutorias.getModel();

           while (modelo.getRowCount() != 0) {
               modelo.removeRow(0);
           }

           for (int i = 0; tutorias != null && i < tutorias.size(); i++) {
               Object[] array = tutorias.get(i).toArray();
               if (checkTutorias.isSelected()) {
                   int anio = Integer.parseInt((String) cbAnioTutoria.getSelectedItem());
                   String ciclo = (String) cbCicloTutoria.getSelectedItem();
                   if (existenTutorias(anio,ciclo,array[0])) {
                       modelo.addRow(array);
                   }
               } else {
                   modelo.addRow(array);
               }
           }
     }

    private boolean existenTutorias(int anio, String ciclo,Object cod) {
        return controller.existenTutorias(anio,ciclo,(String) cod);
    }
    
     private boolean esTutora(int anio, String ciclo,Object cedula) {
        return controller.esTutora(anio,ciclo,(String) cedula);
    }
     
    
    private void update_tableTutores(boolean query) {
            ArrayList<Tutor> tutoras = controller.getTutores();

            if (query) {
               if (tutoras != null) {
                   tutoras.clear();
               }
           }

           DefaultTableModel modelo = (DefaultTableModel) table_tutores.getModel();

           while (modelo.getRowCount() != 0) {
               modelo.removeRow(0);
           }

           for (int i = 0; tutoras != null && i < tutoras.size(); i++) {
               Object[] array = tutoras.get(i).toArray();
               if (checkTutores.isSelected()) {
                   int anio = Integer.parseInt((String) cbAnioTutores.getSelectedItem());
                   String ciclo = (String) cbCicloTutores.getSelectedItem();
                   if (esTutora(anio,ciclo,array[0]+"")) {
                       modelo.addRow(array);
                   }
               } else {
                   modelo.addRow(array);
               }
           }
     }
    
     private void update_tableEstudiantes(boolean query) {
         update_Table2();
//            ArrayList<Estudiante> estudiantes = controller.getEstudiantes();
//            if (query) {
//               if (estudiantes != null) {
//                   estudiantes.clear();
//               }
//           }
//
//           DefaultTableModel modelo = (DefaultTableModel) table_estudiantes.getModel();
//
//           while (modelo.getRowCount() != 0) {
//               modelo.removeRow(0);
//           }                     
//         
////CAMBIAR LA CONSULTA A RETORNAR LISTA DE ESTUDIANTES ANIo CICLO CARRERA
//           for (int i = 0; estudiantes != null && i < estudiantes.size(); i++) {
//               Object[] array = estudiantes.get(i).toArray();
//               array[8] = controller.getCarrera(Integer.parseInt((String) array[8]));
//               if (checkEstudiantes.isSelected()) {
//                   String anio = (String) cbAnioEstudiante.getSelectedItem();
//                   String ciclo = (String) cbCicloEstudiante.getSelectedItem();
//                   String carrera=carreracbEstudiante.getSelectedItem()+"";
//                   if(carrera.equals("--")){
//                       ArrayList<Estudiante> filtrados = controller.getEstudiantes(Integer.parseInt(anio),ciclo,controller.getCarreras(carrera));
//                        Object[] array1;String nomCarrera="";
//                        if(filtrados!=null && filtrados.size()>0){
//                             for (int j = 0; j < filtrados.size(); j++) {
//                                   array1 = filtrados.get(j).toArray();
//                                   nomCarrera=controller.getCarrera(Integer.parseInt((String) array1[8]));
//                                   modelo.addRow(array1);
//                             }
//                        }
//                   }else{
//                     ArrayList<Estudiante> filtrados = controller.getEstudiantes(Integer.parseInt(anio),ciclo,controller.getCarreras(carrera));
//                     Object[] array1;String nomCarrera="";
//                     if(filtrados!=null && filtrados.size()>0){
//                        array1 = filtrados.get(0).toArray();
//                        nomCarrera=controller.getCarrera(Integer.parseInt((String) array1[8]));
//                     }
//                     for (int j = 0; filtrados != null && j < filtrados.size(); j++) {
//                         array1 = filtrados.get(j).toArray();
//                         array1[8] = nomCarrera;
//                         modelo.addRow(array1);                                
//                     }
//                     i= estudiantes.size();
//                   }
//               } else {
//                   modelo.addRow(array);
//               }
//           }
     }

     
     public void update_Table2(){
         ArrayList<Estudiante> estudiantes = controller.getEstudiantes();

         DefaultTableModel modelo = (DefaultTableModel) table_estudiantes.getModel();

         while (modelo.getRowCount() != 0) {
               modelo.removeRow(0);
          }                    
          for (int i = 0; estudiantes != null && i < estudiantes.size(); i++) {
               Object[] array = estudiantes.get(i).toArray2();
               array[8] = controller.getCarrera(Integer.parseInt((String) array[8]));
               if (checkEstudiantes.isSelected()) {
                   String anio = (String) cbAnioEstudiante.getSelectedItem();
                   String ciclo = (String) cbCicloEstudiante.getSelectedItem();
                   String carrera=carreracbEstudiante.getSelectedItem()+"";
                   tipoConsulta(ciclo,anio,carrera);
                   i=estudiantes.size();//para salir del ciclo
               }else{
                    modelo.addRow(array);    
               }
          }
    }
         
    private Tutor buscarTutora(int ced) {
        return controller.getTutorPorCed(ced);
    } 

    private void tipoConsulta(String ciclo, String anio, String carrera) {
        DefaultTableModel modelo = (DefaultTableModel) table_estudiantes.getModel();

        if (ciclo.equals("--") && anio.equals("--") && carrera.equals("--")) {
            ArrayList<Estudiante> estudiantes = controller.getEstudiantes();
            for (int i = 0; estudiantes != null && i < estudiantes.size(); i++) {
                Object[] array = estudiantes.get(i).toArray2();
                array[8] = controller.getCarrera(Integer.parseInt((String) array[8]));
                modelo.addRow(array);
            }
        } else {
            ArrayList<Estudiante> filtrados = null;
            if (ciclo.equals("--") && !anio.equals("--") && carrera.equals("--")) {
                filtrados = controller.getEstudiantesPorAnio(anio);
            } else {
                if (ciclo.equals("--") && anio.equals("--") && !carrera.equals("--")) {
                    filtrados = controller.getEstudiantesPorCarrera(controller.getCarreras(carrera));
                } else {
                    if (ciclo.equals("--") && !anio.equals("--") && !carrera.equals("--")) {
                        filtrados = controller.getEstudiantesPorCarreraYanio(controller.getCarreras(carrera),anio);
                    }else{
                        if (!ciclo.equals("--") && anio.equals("--") && carrera.equals("--")) {
                         filtrados = controller.getEstudiantesPorCiclo(ciclo);
                        }else{
                            if (!ciclo.equals("--") && anio.equals("--") && !carrera.equals("--")) {
                            filtrados = controller.getEstudiantesPorCicloCarrera(ciclo,controller.getCarreras(carrera));
                            }else{
                                if (!ciclo.equals("--") && !anio.equals("--") && carrera.equals("--")) {
                                     filtrados = controller.getEstudiantesPorCicloAnio(ciclo,anio);
                                }else{
                                   if (!ciclo.equals("--") && !anio.equals("--") && !carrera.equals("--")) {
                                     filtrados = controller.getEstudiantesPorPorCicloCarreraAnio(ciclo,controller.getCarreras(carrera),Integer.parseInt(anio));
                                    }  
                                }
                            }
                        }
                    }
                }
            }

            Object[] array1;
            String nomCarrera = "";
            for (int j = 0; filtrados != null && j < filtrados.size(); j++) {
                array1 = filtrados.get(j).toArray2();
                nomCarrera = controller.getCarrera(Integer.parseInt((String) array1[8]));
                array1[8] = nomCarrera;
                modelo.addRow(array1);
            }
        }
    }
}